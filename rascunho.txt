  -GRID
Para a grid de formigas, inicialmente foi pensado fazer uma matriz de 50 por 50.
A ideia inicial era simplificar este processo, porém logo foi notado que uma
forma mais simples de realizar este trabalho em ruby 2.3 era com hash, então a
forma de implementação da GRID passou a ser por hash, aonde a chave era composta
dos dois valores de uma matriz, linha e coluna, na seguinte formula:

      chave = i * tamlinha + j

Aonde 'chave' é a chave que será usada no código para localizar a posição da
pseudo matriz em que existe o conteudo desejado. 'i' é a posição da linha, 'j'
é a posição da coluna e 'tamlinha' é o tamanho maximo de linhas.

Uma outra opção, caso fosse feito uma grid dinâmica com mais colunas que linhas
é criar um 'if' aonde caso o numero maximo de colunas seja maior que o numero de
linhas, a formula de calculo é alterada para:

    chave = j * tamcoluna + i

Aonde 'tamcoluna' é o numero maximo de colunas na grid.

Para mostrar a grid, esta sendo empregada um metodo que retornava uma variavel
grid, porém isto retornava uma copia dos valores de grid para o escopo principal
da aplicação. Isto inferiu em um problema grave aonde a grid não estava guardando
nenhum valor pois seu tipo não era mantido devido a este problema da variavel de
retorno, me levou um bom tempo e a ajuda de alguns amigos para perceber que
quando se mexia na variavel no escopo do metodo, a variavel no escopo principal
também era alterada.


Referências:http://ruby-doc.org/core-2.4.0/Hash.html
            http://www.tutorialspoint.com/ruby/ruby_hashes.htm

  -FORMIGAS MORTAS
O número de formigas mortas foi imaginado de acordo com o tamanho da grid. Quanto
maior a grid, maior o número de formigas mortas, quanto menor, menos formigas.
O numero de formigas mortas recomendado é 1/10 do número maximo de espaços na matriz, este
numero foi pensado para se dar uniformidade aos testes, independente de tamanho
da grid. Contudo o número pode ser alterado para testes separados.


  -FORMIGAS VIVAS
Para as formigas vivas, o método utilizado foi basicamente o mesmo. Elas são
colocadas na grid de forma homogênia, em espaços ainda não ocupados por formigas
mortas. O recomendado de formigas vivas é 1/100 espaços na grid, porém este
valor pode ser alterado por meio de uma variável.

Foi adicionado um classe 'ants' onde cada objeto desta classe irá guardar
informações da formiga como posição atual e carregando ou não um objeto. A ideia
é facilitar na hora de mexer com a formiga, mas neste momento eu estou tendo
alguns problemas com a criação de instancias para a classe. Culpa de uma base
fraca em Programação Orientada a Objetos.

  -INTERAÇÕES


  -MOVIMENTO
Para o movimento das formigas vivas dentro da grid, deve ser levado em
consideração que a grid é feita em hash, isto influencia na hora de mover a
formiga pois não existe uma barreira de posição no vetor para parar a formiga
que estiver na borda da grid, seguindo uma metodologia normal, uma formiga na
borda com hash 


  -MULTI-THREADING

Referências: http://www.restlessprogrammer.com/2013/02/multi-threading-in-jruby.html
             http://stackoverflow.com/questions/56087/does-ruby-have-real-multithreading#57802
